import asyncio
import logging


import config
import todo
import keyboards
import keyboards.inline_keyboards
import db
from apscheduler.schedulers.asyncio import AsyncIOScheduler


from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

logging.basicConfig(level=logging.INFO)

API_TOKEN = config.TELEGRAM_API_TOKEN

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
scheduler = AsyncIOScheduler()


class NewTasks(StatesGroup):
    save_data = State()
    new_time = State()
    numbers = State()


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message, state: FSMContext):
    await state.finish()
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"""
    await message.answer(
        "–ë–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞—á\n\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏: ‚ûï–î–æ–±–∞–≤–∏—Ç—å\n"
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á: üìÖ–í—Å–µ –∑–∞–¥–∞—á–∏\n",
        reply_markup=keyboards.home)


@dp.message_handler(Text(equals=["‚ûï–î–æ–±–∞–≤–∏—Ç—å"]))
async def add_new_task(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –ë–î"""
    answer_message = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ç–æ–≥–æ, –æ —á–µ–º –í–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å."
    await message.answer(answer_message)


@dp.message_handler(Text(equals=["üìÖ–í—Å–µ –∑–∞–¥–∞—á–∏"]))
async def all_tasks(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    message_send = await db.take_all_tasks(message.from_user.id)
    choice_key = await keyboards.inline_keyboards.choice_add(0, message_send)
    await state.update_data(todo_list=message_send, current_page=0, user_id=message.from_user.id)
    message_send = await todo.parsing_text(0, message_send)
    if message_send is not None and message_send != "":
        await message.answer(message_send, reply_markup=choice_key)
    else:
        await message.answer("üòê–ù–∏—á–µ–≥–æ –Ω–µ—Ç", reply_markup=keyboards.home)
        await state.finish()


@dp.message_handler(state=NewTasks.new_time)
async def add_time(message: types.Message, state: FSMContext):
    """–ù–∞—Ö–æ–¥–∏–º—Å—è –≤ –º–µ–Ω—é –≤—Ä–µ–º–µ–Ω–∏"""
    if message.text == "üìù–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É":
        user_data = await state.get_data()
        await db.add_new_task(message.from_user.id, user_data['newtask'])
        await state.finish()
        await message.answer("–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∑–∞–º–µ—Ç–∫—É",
                             reply_markup=keyboards.home)
        return

    elif message.text == "üîô–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–õ–∞–¥–Ω–æ, –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º",
                             reply_markup=keyboards.home)
        return

    check_datetime = todo.check_valid(message.text)
    if check_datetime == "error":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏ –≤ –±—É–¥—É—â–µ–º –≤—Ä–µ–º–µ–Ω–∏, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ"
                             "\"üìù–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É\", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ—ë –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏.",
                             reply_markup=keyboards.save)
        return

    await state.update_data(newtime=check_datetime)
    user_data = await state.get_data()
    await message.answer(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–º–µ—Ç–∫—É:\n{user_data['newtask']}\n\nC–æ –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n{user_data['newtime']}\n\n"
        f"–ò –Ω–∞–∂–º–∏—Ç–µ \"üìù–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É\", –µ—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ.",
        reply_markup=keyboards.save)
    await NewTasks.save_data.set()


@dp.message_handler(state=NewTasks.save_data)
async def add_data(message: types.Message, state: FSMContext):
    """–ù–∞—Ö–æ–¥–∏–º—Å—è –≤ –º–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    if message.text == "üìù–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É":
        user_data = await state.get_data()
        await db.add_new_task(message.from_user.id, user_data['newtask'], user_data['newtime'])
        await state.finish()
        await message.answer("–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∑–∞–º–µ—Ç–∫—É",
                             reply_markup=keyboards.home)
        await state.finish()

    elif message.text == "üîô–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–õ–∞–¥–Ω–æ, –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º",
                             reply_markup=keyboards.home)

    else:
        await message.answer("–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                             reply_markup=keyboards.save)


@dp.callback_query_handler(lambda call: call.data in ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"])
async def menu_numbers(call: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    if str(user_data['todo_list'][0][int(call.data) - 1 + user_data['current_page'] * 10][3]) != 'None':
        text_data = str(user_data['todo_list'][0][int(call.data) - 1 + user_data['current_page'] * 10][2]) + \
                    "\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: " + str(
            user_data['todo_list'][0][int(call.data) - 1 + user_data['current_page'] * 10][3]) + "\n\n"
    else:
        text_data = str(user_data['todo_list'][0][int(call.data) - 1 + user_data['current_page'] * 10][2]) + "\n\n"
    await state.update_data(number=int(call.data) - 1 + user_data['current_page'] * 10)
    if text_data is not None and text_data != "":
        await call.message.edit_text(text=text_data)
        await asyncio.sleep(0.3)
        await call.message.edit_reply_markup(reply_markup=keyboards.setup)
    else:
        await state.finish()
        await call.message.delete()
        await types.Message.answer("üòê–ù–∏—á–µ–≥–æ –Ω–µ—Ç", reply_markup=keyboards.home)


@dp.callback_query_handler(lambda call: call.data == "success")
async def success_menu(call: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    take_data = await db.take_all_tasks(user_data['user_id'])
    await db.delete_task(take_data[0][user_data["number"]][0])
    take_data = await db.take_all_tasks(user_data['user_id'])
    choice_key = await keyboards.inline_keyboards.choice_add(user_data['current_page'], take_data)
    await state.update_data(todo_list=take_data)
    take_data = await todo.parsing_text(user_data['current_page'], take_data)
    if take_data is not None and take_data != "":
        await call.message.edit_text(text=take_data)
        await asyncio.sleep(0.3)
        await call.message.edit_reply_markup(reply_markup=choice_key)
    else:
        await state.finish()
        await call.message.delete()
        await types.Message.answer("üòê–ù–∏—á–µ–≥–æ –Ω–µ—Ç", reply_markup=keyboards.home)


@dp.callback_query_handler(lambda call: call.data == "back")
async def success_menu(call: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    take_data = await db.take_all_tasks(user_data['user_id'])
    choice_key = await keyboards.inline_keyboards.choice_add(user_data['current_page'], take_data)
    await state.update_data(todo_list=take_data)
    take_data = await todo.parsing_text(user_data['current_page'], take_data)
    if take_data is not None and take_data != "":
        await call.message.edit_text(text=take_data)
        await asyncio.sleep(0.3)
        await call.message.edit_reply_markup(reply_markup=choice_key)
    else:
        await state.finish()
        await call.message.delete()
        await types.Message.answer("üòê–ù–∏—á–µ–≥–æ –Ω–µ—Ç", reply_markup=keyboards.home)


@dp.callback_query_handler(lambda call: call.data == "backbut")
async def success_menu(call: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    await state.update_data(current_page=user_data['current_page'] - 1)
    user_data = await state.get_data()
    take_data = await db.take_all_tasks(user_data['user_id'])
    choice_key = await keyboards.inline_keyboards.choice_add(user_data['current_page'], take_data)
    await state.update_data(todo_list=take_data)
    take_data = await todo.parsing_text(user_data['current_page'], take_data)
    if take_data is not None and take_data != "":
        await call.message.edit_text(text=take_data)
        await asyncio.sleep(0.3)
        await call.message.edit_reply_markup(reply_markup=choice_key)
    else:
        await state.finish()
        await call.message.delete()
        await types.Message.answer("üòê–ù–∏—á–µ–≥–æ –Ω–µ—Ç", reply_markup=keyboards.home)


@dp.callback_query_handler(lambda call: call.data == "nextbut")
async def success_menu(call: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    await state.update_data(current_page=user_data['current_page'] + 1)
    user_data = await state.get_data()
    take_data = await db.take_all_tasks(user_data['user_id'])
    choice_key = await keyboards.inline_keyboards.choice_add(user_data['current_page'], take_data)
    await state.update_data(todo_list=take_data)
    take_data = await todo.parsing_text(user_data['current_page'], take_data)
    if take_data is not None and take_data != "":
        await call.message.edit_text(text=take_data)
        await asyncio.sleep(0.3)
        await call.message.edit_reply_markup(reply_markup=choice_key)
    else:
        await types.Message.answer("üòê–ù–∏—á–µ–≥–æ –Ω–µ—Ç", reply_markup=keyboards.home)


@dp.callback_query_handler(text="cancel")
async def cancel_menu(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()


@dp.message_handler()
async def take_task(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, –∫–∞–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    await state.update_data(newtask=message.text[:99])
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"üìù–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É\".",
                         reply_markup=keyboards.save)
    await NewTasks.new_time.set()


def schedule_jobs():
    scheduler.add_job(db_check, trigger='cron', minute='*/1')


async def on_startup(_):
    schedule_jobs()


async def db_check():
    take_data = await db.check_datetime()
    for m in range(0, (len(take_data[0]))):
        await bot.send_message(str(take_data[0][m][1]), "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:" + str(take_data[0][m][2]) +
                               "\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " + str(take_data[0][m][3]))
        await asyncio.sleep(0.3)


if __name__ == '__main__':
    scheduler.start()
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
